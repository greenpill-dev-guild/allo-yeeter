/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type AttestationRequestDataStruct = {
  recipient: PromiseOrValue<string>;
  expirationTime: PromiseOrValue<BigNumberish>;
  revocable: PromiseOrValue<boolean>;
  refUID: PromiseOrValue<BytesLike>;
  data: PromiseOrValue<BytesLike>;
  value: PromiseOrValue<BigNumberish>;
};

export type AttestationRequestDataStructOutput = [
  string,
  BigNumber,
  boolean,
  string,
  string,
  BigNumber
] & {
  recipient: string;
  expirationTime: BigNumber;
  revocable: boolean;
  refUID: string;
  data: string;
  value: BigNumber;
};

export type EIP712SignatureStruct = {
  v: PromiseOrValue<BigNumberish>;
  r: PromiseOrValue<BytesLike>;
  s: PromiseOrValue<BytesLike>;
};

export type EIP712SignatureStructOutput = [number, string, string] & {
  v: number;
  r: string;
  s: string;
};

export type DelegatedProxyAttestationRequestStruct = {
  schema: PromiseOrValue<BytesLike>;
  data: AttestationRequestDataStruct;
  signature: EIP712SignatureStruct;
  attester: PromiseOrValue<string>;
  deadline: PromiseOrValue<BigNumberish>;
};

export type DelegatedProxyAttestationRequestStructOutput = [
  string,
  AttestationRequestDataStructOutput,
  EIP712SignatureStructOutput,
  string,
  BigNumber
] & {
  schema: string;
  data: AttestationRequestDataStructOutput;
  signature: EIP712SignatureStructOutput;
  attester: string;
  deadline: BigNumber;
};

export type MultiDelegatedProxyAttestationRequestStruct = {
  schema: PromiseOrValue<BytesLike>;
  data: AttestationRequestDataStruct[];
  signatures: EIP712SignatureStruct[];
  attester: PromiseOrValue<string>;
  deadline: PromiseOrValue<BigNumberish>;
};

export type MultiDelegatedProxyAttestationRequestStructOutput = [
  string,
  AttestationRequestDataStructOutput[],
  EIP712SignatureStructOutput[],
  string,
  BigNumber
] & {
  schema: string;
  data: AttestationRequestDataStructOutput[];
  signatures: EIP712SignatureStructOutput[];
  attester: string;
  deadline: BigNumber;
};

export type RevocationRequestDataStruct = {
  uid: PromiseOrValue<BytesLike>;
  value: PromiseOrValue<BigNumberish>;
};

export type RevocationRequestDataStructOutput = [string, BigNumber] & {
  uid: string;
  value: BigNumber;
};

export type MultiDelegatedProxyRevocationRequestStruct = {
  schema: PromiseOrValue<BytesLike>;
  data: RevocationRequestDataStruct[];
  signatures: EIP712SignatureStruct[];
  revoker: PromiseOrValue<string>;
  deadline: PromiseOrValue<BigNumberish>;
};

export type MultiDelegatedProxyRevocationRequestStructOutput = [
  string,
  RevocationRequestDataStructOutput[],
  EIP712SignatureStructOutput[],
  string,
  BigNumber
] & {
  schema: string;
  data: RevocationRequestDataStructOutput[];
  signatures: EIP712SignatureStructOutput[];
  revoker: string;
  deadline: BigNumber;
};

export type DelegatedProxyRevocationRequestStruct = {
  schema: PromiseOrValue<BytesLike>;
  data: RevocationRequestDataStruct;
  signature: EIP712SignatureStruct;
  revoker: PromiseOrValue<string>;
  deadline: PromiseOrValue<BigNumberish>;
};

export type DelegatedProxyRevocationRequestStructOutput = [
  string,
  RevocationRequestDataStructOutput,
  EIP712SignatureStructOutput,
  string,
  BigNumber
] & {
  schema: string;
  data: RevocationRequestDataStructOutput;
  signature: EIP712SignatureStructOutput;
  revoker: string;
  deadline: BigNumber;
};

export interface EIP712ProxyInterface extends utils.Interface {
  functions: {
    "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address,uint64))": FunctionFragment;
    "getAttestTypeHash()": FunctionFragment;
    "getAttester(bytes32)": FunctionFragment;
    "getDomainSeparator()": FunctionFragment;
    "getEAS()": FunctionFragment;
    "getName()": FunctionFragment;
    "getRevokeTypeHash()": FunctionFragment;
    "multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])": FunctionFragment;
    "multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])": FunctionFragment;
    "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64))": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "attestByDelegation"
      | "getAttestTypeHash"
      | "getAttester"
      | "getDomainSeparator"
      | "getEAS"
      | "getName"
      | "getRevokeTypeHash"
      | "multiAttestByDelegation"
      | "multiRevokeByDelegation"
      | "revokeByDelegation"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "attestByDelegation",
    values: [DelegatedProxyAttestationRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttestTypeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAttester",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getEAS", values?: undefined): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRevokeTypeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiAttestByDelegation",
    values: [MultiDelegatedProxyAttestationRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multiRevokeByDelegation",
    values: [MultiDelegatedProxyRevocationRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeByDelegation",
    values: [DelegatedProxyRevocationRequestStruct]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "attestByDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttestTypeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEAS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRevokeTypeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiAttestByDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiRevokeByDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeByDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {};
}

export interface EIP712Proxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EIP712ProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    attestByDelegation(
      delegatedRequest: DelegatedProxyAttestationRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAttestTypeHash(overrides?: CallOverrides): Promise<[string]>;

    getAttester(
      uid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDomainSeparator(overrides?: CallOverrides): Promise<[string]>;

    getEAS(overrides?: CallOverrides): Promise<[string]>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    getRevokeTypeHash(overrides?: CallOverrides): Promise<[string]>;

    multiAttestByDelegation(
      multiDelegatedRequests: MultiDelegatedProxyAttestationRequestStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multiRevokeByDelegation(
      multiDelegatedRequests: MultiDelegatedProxyRevocationRequestStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeByDelegation(
      delegatedRequest: DelegatedProxyRevocationRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  attestByDelegation(
    delegatedRequest: DelegatedProxyAttestationRequestStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAttestTypeHash(overrides?: CallOverrides): Promise<string>;

  getAttester(
    uid: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getDomainSeparator(overrides?: CallOverrides): Promise<string>;

  getEAS(overrides?: CallOverrides): Promise<string>;

  getName(overrides?: CallOverrides): Promise<string>;

  getRevokeTypeHash(overrides?: CallOverrides): Promise<string>;

  multiAttestByDelegation(
    multiDelegatedRequests: MultiDelegatedProxyAttestationRequestStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multiRevokeByDelegation(
    multiDelegatedRequests: MultiDelegatedProxyRevocationRequestStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeByDelegation(
    delegatedRequest: DelegatedProxyRevocationRequestStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    attestByDelegation(
      delegatedRequest: DelegatedProxyAttestationRequestStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getAttestTypeHash(overrides?: CallOverrides): Promise<string>;

    getAttester(
      uid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getDomainSeparator(overrides?: CallOverrides): Promise<string>;

    getEAS(overrides?: CallOverrides): Promise<string>;

    getName(overrides?: CallOverrides): Promise<string>;

    getRevokeTypeHash(overrides?: CallOverrides): Promise<string>;

    multiAttestByDelegation(
      multiDelegatedRequests: MultiDelegatedProxyAttestationRequestStruct[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    multiRevokeByDelegation(
      multiDelegatedRequests: MultiDelegatedProxyRevocationRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    revokeByDelegation(
      delegatedRequest: DelegatedProxyRevocationRequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    attestByDelegation(
      delegatedRequest: DelegatedProxyAttestationRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAttestTypeHash(overrides?: CallOverrides): Promise<BigNumber>;

    getAttester(
      uid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDomainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    getEAS(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    getRevokeTypeHash(overrides?: CallOverrides): Promise<BigNumber>;

    multiAttestByDelegation(
      multiDelegatedRequests: MultiDelegatedProxyAttestationRequestStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multiRevokeByDelegation(
      multiDelegatedRequests: MultiDelegatedProxyRevocationRequestStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeByDelegation(
      delegatedRequest: DelegatedProxyRevocationRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    attestByDelegation(
      delegatedRequest: DelegatedProxyAttestationRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAttestTypeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAttester(
      uid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDomainSeparator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEAS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRevokeTypeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiAttestByDelegation(
      multiDelegatedRequests: MultiDelegatedProxyAttestationRequestStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multiRevokeByDelegation(
      multiDelegatedRequests: MultiDelegatedProxyRevocationRequestStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeByDelegation(
      delegatedRequest: DelegatedProxyRevocationRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

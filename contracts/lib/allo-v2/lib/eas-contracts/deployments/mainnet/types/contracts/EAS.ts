/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type AttestationRequestDataStruct = {
  recipient: PromiseOrValue<string>;
  expirationTime: PromiseOrValue<BigNumberish>;
  revocable: PromiseOrValue<boolean>;
  refUID: PromiseOrValue<BytesLike>;
  data: PromiseOrValue<BytesLike>;
  value: PromiseOrValue<BigNumberish>;
};

export type AttestationRequestDataStructOutput = [
  string,
  BigNumber,
  boolean,
  string,
  string,
  BigNumber
] & {
  recipient: string;
  expirationTime: BigNumber;
  revocable: boolean;
  refUID: string;
  data: string;
  value: BigNumber;
};

export type AttestationRequestStruct = {
  schema: PromiseOrValue<BytesLike>;
  data: AttestationRequestDataStruct;
};

export type AttestationRequestStructOutput = [
  string,
  AttestationRequestDataStructOutput
] & { schema: string; data: AttestationRequestDataStructOutput };

export type EIP712SignatureStruct = {
  v: PromiseOrValue<BigNumberish>;
  r: PromiseOrValue<BytesLike>;
  s: PromiseOrValue<BytesLike>;
};

export type EIP712SignatureStructOutput = [number, string, string] & {
  v: number;
  r: string;
  s: string;
};

export type DelegatedAttestationRequestStruct = {
  schema: PromiseOrValue<BytesLike>;
  data: AttestationRequestDataStruct;
  signature: EIP712SignatureStruct;
  attester: PromiseOrValue<string>;
};

export type DelegatedAttestationRequestStructOutput = [
  string,
  AttestationRequestDataStructOutput,
  EIP712SignatureStructOutput,
  string
] & {
  schema: string;
  data: AttestationRequestDataStructOutput;
  signature: EIP712SignatureStructOutput;
  attester: string;
};

export type AttestationStruct = {
  uid: PromiseOrValue<BytesLike>;
  schema: PromiseOrValue<BytesLike>;
  time: PromiseOrValue<BigNumberish>;
  expirationTime: PromiseOrValue<BigNumberish>;
  revocationTime: PromiseOrValue<BigNumberish>;
  refUID: PromiseOrValue<BytesLike>;
  recipient: PromiseOrValue<string>;
  attester: PromiseOrValue<string>;
  revocable: PromiseOrValue<boolean>;
  data: PromiseOrValue<BytesLike>;
};

export type AttestationStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  string,
  boolean,
  string
] & {
  uid: string;
  schema: string;
  time: BigNumber;
  expirationTime: BigNumber;
  revocationTime: BigNumber;
  refUID: string;
  recipient: string;
  attester: string;
  revocable: boolean;
  data: string;
};

export type MultiAttestationRequestStruct = {
  schema: PromiseOrValue<BytesLike>;
  data: AttestationRequestDataStruct[];
};

export type MultiAttestationRequestStructOutput = [
  string,
  AttestationRequestDataStructOutput[]
] & { schema: string; data: AttestationRequestDataStructOutput[] };

export type MultiDelegatedAttestationRequestStruct = {
  schema: PromiseOrValue<BytesLike>;
  data: AttestationRequestDataStruct[];
  signatures: EIP712SignatureStruct[];
  attester: PromiseOrValue<string>;
};

export type MultiDelegatedAttestationRequestStructOutput = [
  string,
  AttestationRequestDataStructOutput[],
  EIP712SignatureStructOutput[],
  string
] & {
  schema: string;
  data: AttestationRequestDataStructOutput[];
  signatures: EIP712SignatureStructOutput[];
  attester: string;
};

export type RevocationRequestDataStruct = {
  uid: PromiseOrValue<BytesLike>;
  value: PromiseOrValue<BigNumberish>;
};

export type RevocationRequestDataStructOutput = [string, BigNumber] & {
  uid: string;
  value: BigNumber;
};

export type MultiRevocationRequestStruct = {
  schema: PromiseOrValue<BytesLike>;
  data: RevocationRequestDataStruct[];
};

export type MultiRevocationRequestStructOutput = [
  string,
  RevocationRequestDataStructOutput[]
] & { schema: string; data: RevocationRequestDataStructOutput[] };

export type MultiDelegatedRevocationRequestStruct = {
  schema: PromiseOrValue<BytesLike>;
  data: RevocationRequestDataStruct[];
  signatures: EIP712SignatureStruct[];
  revoker: PromiseOrValue<string>;
};

export type MultiDelegatedRevocationRequestStructOutput = [
  string,
  RevocationRequestDataStructOutput[],
  EIP712SignatureStructOutput[],
  string
] & {
  schema: string;
  data: RevocationRequestDataStructOutput[];
  signatures: EIP712SignatureStructOutput[];
  revoker: string;
};

export type RevocationRequestStruct = {
  schema: PromiseOrValue<BytesLike>;
  data: RevocationRequestDataStruct;
};

export type RevocationRequestStructOutput = [
  string,
  RevocationRequestDataStructOutput
] & { schema: string; data: RevocationRequestDataStructOutput };

export type DelegatedRevocationRequestStruct = {
  schema: PromiseOrValue<BytesLike>;
  data: RevocationRequestDataStruct;
  signature: EIP712SignatureStruct;
  revoker: PromiseOrValue<string>;
};

export type DelegatedRevocationRequestStructOutput = [
  string,
  RevocationRequestDataStructOutput,
  EIP712SignatureStructOutput,
  string
] & {
  schema: string;
  data: RevocationRequestDataStructOutput;
  signature: EIP712SignatureStructOutput;
  revoker: string;
};

export interface EASInterface extends utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))": FunctionFragment;
    "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))": FunctionFragment;
    "getAttestTypeHash()": FunctionFragment;
    "getAttestation(bytes32)": FunctionFragment;
    "getDomainSeparator()": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "getRevokeOffchain(address,bytes32)": FunctionFragment;
    "getRevokeTypeHash()": FunctionFragment;
    "getSchemaRegistry()": FunctionFragment;
    "getTimestamp(bytes32)": FunctionFragment;
    "isAttestationValid(bytes32)": FunctionFragment;
    "multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])": FunctionFragment;
    "multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address)[])": FunctionFragment;
    "multiRevoke((bytes32,(bytes32,uint256)[])[])": FunctionFragment;
    "multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address)[])": FunctionFragment;
    "multiRevokeOffchain(bytes32[])": FunctionFragment;
    "multiTimestamp(bytes32[])": FunctionFragment;
    "revoke((bytes32,(bytes32,uint256)))": FunctionFragment;
    "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))": FunctionFragment;
    "revokeOffchain(bytes32)": FunctionFragment;
    "timestamp(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "VERSION"
      | "attest"
      | "attestByDelegation"
      | "getAttestTypeHash"
      | "getAttestation"
      | "getDomainSeparator"
      | "getNonce"
      | "getRevokeOffchain"
      | "getRevokeTypeHash"
      | "getSchemaRegistry"
      | "getTimestamp"
      | "isAttestationValid"
      | "multiAttest"
      | "multiAttestByDelegation"
      | "multiRevoke"
      | "multiRevokeByDelegation"
      | "multiRevokeOffchain"
      | "multiTimestamp"
      | "revoke"
      | "revokeByDelegation"
      | "revokeOffchain"
      | "timestamp"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "attest",
    values: [AttestationRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "attestByDelegation",
    values: [DelegatedAttestationRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttestTypeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAttestation",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRevokeOffchain",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRevokeTypeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSchemaRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestamp",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAttestationValid",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "multiAttest",
    values: [MultiAttestationRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multiAttestByDelegation",
    values: [MultiDelegatedAttestationRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multiRevoke",
    values: [MultiRevocationRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multiRevokeByDelegation",
    values: [MultiDelegatedRevocationRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multiRevokeOffchain",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multiTimestamp",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [RevocationRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeByDelegation",
    values: [DelegatedRevocationRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOffchain",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "timestamp",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "attest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "attestByDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttestTypeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRevokeOffchain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevokeTypeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchemaRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAttestationValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiAttest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiAttestByDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiRevoke",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiRevokeByDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiRevokeOffchain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeByDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOffchain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timestamp", data: BytesLike): Result;

  events: {
    "Attested(address,address,bytes32,bytes32)": EventFragment;
    "Revoked(address,address,bytes32,bytes32)": EventFragment;
    "RevokedOffchain(address,bytes32,uint64)": EventFragment;
    "Timestamped(bytes32,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Attested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokedOffchain"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Timestamped"): EventFragment;
}

export interface AttestedEventObject {
  recipient: string;
  attester: string;
  uid: string;
  schema: string;
}
export type AttestedEvent = TypedEvent<
  [string, string, string, string],
  AttestedEventObject
>;

export type AttestedEventFilter = TypedEventFilter<AttestedEvent>;

export interface RevokedEventObject {
  recipient: string;
  attester: string;
  uid: string;
  schema: string;
}
export type RevokedEvent = TypedEvent<
  [string, string, string, string],
  RevokedEventObject
>;

export type RevokedEventFilter = TypedEventFilter<RevokedEvent>;

export interface RevokedOffchainEventObject {
  revoker: string;
  data: string;
  timestamp: BigNumber;
}
export type RevokedOffchainEvent = TypedEvent<
  [string, string, BigNumber],
  RevokedOffchainEventObject
>;

export type RevokedOffchainEventFilter = TypedEventFilter<RevokedOffchainEvent>;

export interface TimestampedEventObject {
  data: string;
  timestamp: BigNumber;
}
export type TimestampedEvent = TypedEvent<
  [string, BigNumber],
  TimestampedEventObject
>;

export type TimestampedEventFilter = TypedEventFilter<TimestampedEvent>;

export interface EAS extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EASInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    attest(
      request: AttestationRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    attestByDelegation(
      delegatedRequest: DelegatedAttestationRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAttestTypeHash(overrides?: CallOverrides): Promise<[string]>;

    getAttestation(
      uid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[AttestationStructOutput]>;

    getDomainSeparator(overrides?: CallOverrides): Promise<[string]>;

    getNonce(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRevokeOffchain(
      revoker: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRevokeTypeHash(overrides?: CallOverrides): Promise<[string]>;

    getSchemaRegistry(overrides?: CallOverrides): Promise<[string]>;

    getTimestamp(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isAttestationValid(
      uid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    multiAttest(
      multiRequests: MultiAttestationRequestStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multiAttestByDelegation(
      multiDelegatedRequests: MultiDelegatedAttestationRequestStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multiRevoke(
      multiRequests: MultiRevocationRequestStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multiRevokeByDelegation(
      multiDelegatedRequests: MultiDelegatedRevocationRequestStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multiRevokeOffchain(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multiTimestamp(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revoke(
      request: RevocationRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeByDelegation(
      delegatedRequest: DelegatedRevocationRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeOffchain(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timestamp(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  attest(
    request: AttestationRequestStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  attestByDelegation(
    delegatedRequest: DelegatedAttestationRequestStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAttestTypeHash(overrides?: CallOverrides): Promise<string>;

  getAttestation(
    uid: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<AttestationStructOutput>;

  getDomainSeparator(overrides?: CallOverrides): Promise<string>;

  getNonce(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRevokeOffchain(
    revoker: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRevokeTypeHash(overrides?: CallOverrides): Promise<string>;

  getSchemaRegistry(overrides?: CallOverrides): Promise<string>;

  getTimestamp(
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isAttestationValid(
    uid: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  multiAttest(
    multiRequests: MultiAttestationRequestStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multiAttestByDelegation(
    multiDelegatedRequests: MultiDelegatedAttestationRequestStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multiRevoke(
    multiRequests: MultiRevocationRequestStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multiRevokeByDelegation(
    multiDelegatedRequests: MultiDelegatedRevocationRequestStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multiRevokeOffchain(
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multiTimestamp(
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revoke(
    request: RevocationRequestStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeByDelegation(
    delegatedRequest: DelegatedRevocationRequestStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeOffchain(
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timestamp(
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    attest(
      request: AttestationRequestStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    attestByDelegation(
      delegatedRequest: DelegatedAttestationRequestStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getAttestTypeHash(overrides?: CallOverrides): Promise<string>;

    getAttestation(
      uid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<AttestationStructOutput>;

    getDomainSeparator(overrides?: CallOverrides): Promise<string>;

    getNonce(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRevokeOffchain(
      revoker: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRevokeTypeHash(overrides?: CallOverrides): Promise<string>;

    getSchemaRegistry(overrides?: CallOverrides): Promise<string>;

    getTimestamp(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAttestationValid(
      uid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multiAttest(
      multiRequests: MultiAttestationRequestStruct[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    multiAttestByDelegation(
      multiDelegatedRequests: MultiDelegatedAttestationRequestStruct[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    multiRevoke(
      multiRequests: MultiRevocationRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    multiRevokeByDelegation(
      multiDelegatedRequests: MultiDelegatedRevocationRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    multiRevokeOffchain(
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiTimestamp(
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revoke(
      request: RevocationRequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeByDelegation(
      delegatedRequest: DelegatedRevocationRequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeOffchain(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timestamp(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Attested(address,address,bytes32,bytes32)"(
      recipient?: PromiseOrValue<string> | null,
      attester?: PromiseOrValue<string> | null,
      uid?: null,
      schema?: PromiseOrValue<BytesLike> | null
    ): AttestedEventFilter;
    Attested(
      recipient?: PromiseOrValue<string> | null,
      attester?: PromiseOrValue<string> | null,
      uid?: null,
      schema?: PromiseOrValue<BytesLike> | null
    ): AttestedEventFilter;

    "Revoked(address,address,bytes32,bytes32)"(
      recipient?: PromiseOrValue<string> | null,
      attester?: PromiseOrValue<string> | null,
      uid?: null,
      schema?: PromiseOrValue<BytesLike> | null
    ): RevokedEventFilter;
    Revoked(
      recipient?: PromiseOrValue<string> | null,
      attester?: PromiseOrValue<string> | null,
      uid?: null,
      schema?: PromiseOrValue<BytesLike> | null
    ): RevokedEventFilter;

    "RevokedOffchain(address,bytes32,uint64)"(
      revoker?: PromiseOrValue<string> | null,
      data?: PromiseOrValue<BytesLike> | null,
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): RevokedOffchainEventFilter;
    RevokedOffchain(
      revoker?: PromiseOrValue<string> | null,
      data?: PromiseOrValue<BytesLike> | null,
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): RevokedOffchainEventFilter;

    "Timestamped(bytes32,uint64)"(
      data?: PromiseOrValue<BytesLike> | null,
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): TimestampedEventFilter;
    Timestamped(
      data?: PromiseOrValue<BytesLike> | null,
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): TimestampedEventFilter;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    attest(
      request: AttestationRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    attestByDelegation(
      delegatedRequest: DelegatedAttestationRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAttestTypeHash(overrides?: CallOverrides): Promise<BigNumber>;

    getAttestation(
      uid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDomainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRevokeOffchain(
      revoker: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRevokeTypeHash(overrides?: CallOverrides): Promise<BigNumber>;

    getSchemaRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getTimestamp(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAttestationValid(
      uid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiAttest(
      multiRequests: MultiAttestationRequestStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multiAttestByDelegation(
      multiDelegatedRequests: MultiDelegatedAttestationRequestStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multiRevoke(
      multiRequests: MultiRevocationRequestStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multiRevokeByDelegation(
      multiDelegatedRequests: MultiDelegatedRevocationRequestStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multiRevokeOffchain(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multiTimestamp(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revoke(
      request: RevocationRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeByDelegation(
      delegatedRequest: DelegatedRevocationRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeOffchain(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timestamp(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    attest(
      request: AttestationRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    attestByDelegation(
      delegatedRequest: DelegatedAttestationRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAttestTypeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAttestation(
      uid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDomainSeparator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRevokeOffchain(
      revoker: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRevokeTypeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSchemaRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTimestamp(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAttestationValid(
      uid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiAttest(
      multiRequests: MultiAttestationRequestStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multiAttestByDelegation(
      multiDelegatedRequests: MultiDelegatedAttestationRequestStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multiRevoke(
      multiRequests: MultiRevocationRequestStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multiRevokeByDelegation(
      multiDelegatedRequests: MultiDelegatedRevocationRequestStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multiRevokeOffchain(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multiTimestamp(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revoke(
      request: RevocationRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeByDelegation(
      delegatedRequest: DelegatedRevocationRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeOffchain(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timestamp(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

[profile.default]
  auto_detect_solc = false
  bytecode_hash = "none"
  cbor_metadata = false
  emv_version = "paris"
  fs_permissions = [{ access = "read", path = "out-optimized" }]
  libs = ["lib"]
  gas_reports = [
    "SablierV2Comptroller",
    "SablierV2LockupDynamic",
    "SablierV2LockupLinear",
    "SablierV2NFTDescriptor",
  ]
  optimizer = true
  optimizer_runs = 1000
  out = "out"
  script = "script"
  sender = "0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38"
  solc = "0.8.19"
  src = "src"
  test = "test"

[profile.default.fuzz]
  max_test_rejects = 1_000_000 # Number of times `vm.assume` can fail
  runs = 50

[profile.default.invariant]
  call_override = false # Override unsafe external calls to perform reentrancy checks
  depth = 20            # Number of calls executed in one run
  fail_on_revert = true
  runs = 20

# Speed up compilation and tests during development
[profile.lite]
  optimizer = false

# Compile only the production code and the test mocks with via IR
[profile.optimized]
  out = "out-optimized"
  test = "test/mocks"
  via_ir = true

# See "SMTChecker and Formal Verification" in the Solidity docs
[profile.smt]
  ignored_error_codes = [
    7737, # Disable inline assembly warnings
  ]
  out = "out-optimized"
  script = "src"
  test = "src"
  via_ir = true

[profile.smt.model_checker]
  engine = "chc" # constrained Horn clauses
  invariants = ["contract", "reentrancy"]
  show_unproved = true
  timeout = 100_000 # in milliseconds, per solving query
  targets = [
    "assert",
    "constantCondition",
    "divByZero",
    "outOfBounds",
    "overflow",
    "underflow",
  ]

[profile.smt.model_checker.contracts]
  "src/SablierV2LockupDynamic.sol" = ["SablierV2LockupDynamic"]
  "src/SablierV2LockupLinear.sol" = ["SablierV2LockupLinear"]
  "src/SablierV2NFTDescriptor.sol" = ["SablierV2NFTDescriptor"]

# Test the optimized contracts without re-compiling them
[profile.test-optimized]
  src = "test"

[doc]
  ignore = ["**/*.t.sol"]
  out = "docs"
  repository = "https://github.com/sablier-labs/v2-core"

[etherscan]
  arbitrum_one = { key = "${API_KEY_ARBISCAN}" }
  avalanche = { key = "${API_KEY_SNOWTRACE" }
  bnb_smart_chain = { key = "${API_KEY_BSCSCAN}" }
  gnosis_chain = { key = "${API_KEY_GNOSISSCAN}" }
  goerli = { key = "${API_KEY_ETHERSCAN}" }
  mainnet = { key = "${API_KEY_ETHERSCAN}" }
  optimism = { key = "${API_KEY_OPTIMISTIC_ETHERSCAN}" }
  polygon = { key = "${API_KEY_POLYGONSCAN}" }
  sepolia = { key = "${API_KEY_ETHERSCAN}" }

[fmt]
  bracket_spacing = true
  int_types = "long"
  line_length = 120
  multiline_func_header = "all"
  number_underscore = "thousands"
  quote_style = "double"
  tab_width = 4
  wrap_comments = true

[rpc_endpoints]
  arbitrum_one = "https://arbitrum-mainnet.infura.io/v3/${API_KEY_INFURA}"
  avalanche = "https://avalanche-mainnet.infura.io/v3/${API_KEY_INFURA}"
  bnb_smart_chain = "https://bsc-dataseed.binance.org"
  gnosis_chain = "https://rpc.gnosischain.com"
  goerli = "https://goerli.infura.io/v3/${API_KEY_INFURA}"
  localhost = "http://localhost:8545"
  mainnet = "${RPC_URL_MAINNET}"
  optimism = "https://optimism-mainnet.infura.io/v3/${API_KEY_INFURA}"
  polygon = "https://polygon-mainnet.infura.io/v3/${API_KEY_INFURA}"
  sepolia = "https://sepolia.infura.io/v3/${API_KEY_INFURA}"
